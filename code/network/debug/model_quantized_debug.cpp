#include <cmath>
#include <cstdint>
#include <iostream>
#include <limits>

namespace
{
    enum class Operation
    {
        INPUT = 0,
        DENSE = 1,
        OUTPUT = 255
    };

    enum class Activation
    {
        RELU = 0,
        SOFTMAX = 1
    };
}

namespace ssie_model {
constexpr uint8_t intermediateBufferSize = 50;

constexpr uint8_t numInputs = 50;
constexpr uint8_t numClasses = 5;

constexpr uint8_t numOps = 5;
constexpr Operation ops[] = {
    Operation::INPUT,
    Operation::DENSE,
    Operation::DENSE,
    Operation::DENSE,
    Operation::OUTPUT,
};

constexpr Activation acts[] = {
    Activation::RELU,
    Activation::RELU,
    Activation::SOFTMAX,
};

constexpr uint8_t numNeurons[] = {
    10,
    20,
    5,
};

constexpr uint16_t length = 838;
constexpr uint8_t buffer[length] = {
0x80, 0xe1, 0x0a, 0xe6, 0xde, 0xed, 0xf2, 0xfd, 0xe6, 0xe5, 0xdd,
0xd9, 0xf3, 0xf9, 0xe8, 0xed, 0x1f, 0xee, 0x0f, 0x0a, 0xff, 0xfe,
0x19, 0xfa, 0xff, 0xf8, 0xf0, 0x06, 0x02, 0xf6, 0x02, 0x0f, 0xf3,
0xf8, 0x07, 0xee, 0x05, 0xf4, 0xdf, 0xdb, 0xe3, 0x09, 0xe5, 0xf4,
0xf7, 0x01, 0x05, 0x11, 0xdd, 0xf0, 0xf8, 0xff, 0x03, 0x25, 0xe9,
0x06, 0xec, 0xfe, 0xd8, 0xe4, 0x0f, 0x22, 0xe8, 0x0b, 0xe1, 0xd2,
0xfa, 0xf4, 0x04, 0x09, 0xf0, 0xfb, 0xd6, 0x02, 0xfb, 0xec, 0x1e,
0x0b, 0x06, 0x0f, 0xf5, 0x1e, 0xf2, 0x3f, 0x11, 0xe0, 0x05, 0xdc,
0x1b, 0x22, 0xd4, 0x00, 0x02, 0x00, 0x08, 0x0a, 0x01, 0xfd, 0x12,
0xf6, 0x23, 0xec, 0xff, 0xd3, 0xe0, 0xec, 0x05, 0x01, 0xfd, 0xfe,
0x2d, 0x42, 0xe1, 0x39, 0x28, 0x0f, 0xef, 0xff, 0xfd, 0x14, 0x37,
0x09, 0xf8, 0xd3, 0x0d, 0xf3, 0xfb, 0xde, 0x02, 0x2c, 0xfa, 0x02,
0xed, 0xeb, 0x11, 0xe9, 0xf1, 0x12, 0x21, 0xfc, 0xde, 0x3d, 0x1f,
0x07, 0x26, 0x13, 0x1f, 0xef, 0xf7, 0x07, 0xf1, 0xec, 0xf6, 0xb8,
0x20, 0xd5, 0xf1, 0x0c, 0xdd, 0xf4, 0x9b, 0xf7, 0x2a, 0xdf, 0xe5,
0xbd, 0x07, 0x5a, 0x17, 0x2a, 0x07, 0xdc, 0x2a, 0xe3, 0x23, 0x02,
0xce, 0x2e, 0xe9, 0x09, 0xe2, 0xf7, 0x0e, 0x04, 0x44, 0xc7, 0x27,
0x24, 0x20, 0x0f, 0x0a, 0x0d, 0x25, 0xe7, 0xde, 0xc2, 0x0d, 0xcd,
0xf9, 0xbd, 0x07, 0xf1, 0xe9, 0x2f, 0xce, 0xdf, 0x14, 0xfd, 0xfe,
0xfc, 0x10, 0x10, 0x0a, 0x00, 0xe9, 0xea, 0xe4, 0xfa, 0x07, 0xf3,
0x17, 0x13, 0x26, 0xdb, 0x0d, 0xec, 0xd9, 0xe7, 0xf7, 0x13, 0x10,
0x14, 0xe2, 0xef, 0xf3, 0x07, 0x15, 0x0e, 0x17, 0x1d, 0x11, 0x1f,
0x14, 0x01, 0x0b, 0x06, 0x07, 0xed, 0x1d, 0x08, 0xea, 0x09, 0xfe,
0xe5, 0xf1, 0x00, 0x1b, 0x00, 0xdd, 0xf8, 0xf6, 0xe3, 0xe1, 0x0d,
0x11, 0xfd, 0xeb, 0xde, 0x09, 0xef, 0x1c, 0xeb, 0xe5, 0xd0, 0x17,
0xe0, 0xfa, 0x03, 0x20, 0x09, 0x14, 0xe8, 0x06, 0x02, 0x1a, 0xfd,
0x16, 0x04, 0xf2, 0x13, 0xfb, 0xf5, 0x01, 0x08, 0x16, 0x06, 0x01,
0xd4, 0x0a, 0xeb, 0x02, 0xe9, 0xfc, 0x17, 0x03, 0xf1, 0x00, 0xe5,
0x47, 0xe4, 0xdc, 0x01, 0x33, 0x55, 0x46, 0x20, 0x26, 0x10, 0x7f,
0x1d, 0xdc, 0xf5, 0xe0, 0x04, 0x1f, 0xd3, 0x15, 0xbb, 0x15, 0x29,
0x16, 0xec, 0xc8, 0x38, 0xdd, 0xcb, 0xf5, 0xce, 0x5b, 0x1d, 0xed,
0xfe, 0xff, 0x4c, 0xf0, 0x2c, 0xfe, 0x20, 0x1e, 0x12, 0x7a, 0x0a,
0x54, 0xca, 0x1f, 0xed, 0xdb, 0x07, 0x05, 0x12, 0x06, 0x0a, 0xe2,
0x02, 0xc8, 0xce, 0xdf, 0xe2, 0xd5, 0xd6, 0xae, 0x04, 0xf5, 0x28,
0x24, 0x05, 0xe4, 0x0f, 0x00, 0x41, 0xfe, 0xec, 0x28, 0x09, 0xf5,
0x03, 0xe2, 0x30, 0xe1, 0x05, 0x31, 0xf2, 0xff, 0xf7, 0x31, 0x1d,
0xc6, 0x20, 0x11, 0xe8, 0xe7, 0xee, 0xf2, 0x3a, 0x17, 0xfc, 0x26,
0xdd, 0x49, 0x01, 0x0a, 0xec, 0xea, 0xe7, 0x23, 0xe6, 0x20, 0xf9,
0x0b, 0x35, 0xe9, 0x15, 0xed, 0xed, 0x12, 0x0a, 0x01, 0x04, 0xfd,
0x1e, 0xec, 0x0c, 0xdc, 0x0b, 0xd7, 0x06, 0x17, 0x07, 0x0a, 0x23,
0xd9, 0xf5, 0xe3, 0x18, 0xe9, 0xf7, 0x0a, 0xeb, 0x04, 0xe3, 0xec,
0x06, 0x0e, 0x0f, 0x1c, 0xdd, 0xe1, 0x28, 0xff, 0xff, 0xf4, 0x3e,
0xe6, 0x2d, 0xf5, 0x00, 0x14, 0xfb, 0xf9, 0xfd, 0x10, 0x02, 0xdb,
0xd5, 0x1a, 0xe6, 0x40, 0x00, 0x03, 0x20, 0xd9, 0xd1, 0x02, 0xf4,
0x2a, 0x08, 0xf2, 0x00, 0x0c, 0xe7, 0xd4, 0x00, 0x26, 0xf8, 0xf5,
0xf9, 0x05, 0xd4, 0xde, 0xfe, 0x1a, 0x2f, 0xfa, 0x16, 0xdd, 0x37,
0xfb, 0x10, 0x74, 0xdc, 0xff, 0x80, 0x04, 0x00, 0x03, 0xe3, 0xf9,
0xf9, 0x0d, 0x10, 0xf5, 0xdf, 0xff, 0xf9, 0x1d, 0x1f, 0xfb, 0xee,
0x02, 0xe8, 0xff, 0x01, 0xda, 0xff, 0x03, 0x11, 0xee, 0x87, 0x1d,
0xe4, 0x60, 0x05, 0x00, 0x2b, 0xf0, 0x17, 0xe6, 0xe7, 0xbd, 0x09,
0xfd, 0xdd, 0xfb, 0xf5, 0x22, 0x43, 0x20, 0x25, 0xf9, 0xe3, 0x21,
0x05, 0xe3, 0xe6, 0xd3, 0xd4, 0xff, 0x18, 0xf8, 0xec, 0xcd, 0x31,
0x07, 0xef, 0x0e, 0x06, 0xe6, 0xff, 0xf4, 0xd6, 0xd5, 0x5a, 0xea,
0x07, 0x81, 0xe0, 0x2b, 0xbe, 0xf7, 0x1c, 0xe1, 0x20, 0xda, 0xe9,
0x10, 0xf3, 0xd4, 0x14, 0x17, 0x5c, 0xf0, 0xf6, 0x2c, 0x26, 0xf8,
0x16, 0x33, 0xfd, 0xe1, 0xf4, 0xff, 0x25, 0xf2, 0x2e, 0xdd, 0xf2,
0xea, 0xd1, 0x23, 0x11, 0xf1, 0xff, 0x1b, 0x0b, 0xea, 0x0e, 0xde,
0x09, 0xe2, 0x24, 0xf1, 0x3e, 0xfa, 0x0a, 0x00, 0x0e, 0xde, 0x0b,
0xed, 0xdb, 0xee, 0x17, 0xe6, 0xb0, 0x1f, 0x26, 0xe2, 0xe2, 0x11,
0x03, 0xd2, 0xe1, 0x08, 0x06, 0xff, 0xf5, 0x36, 0xee, 0xdf, 0xf2,
0x18, 0xe3, 0x4b, 0x0c, 0x34, 0xff, 0xee, 0x0d, 0xdb, 0xea, 0x08,
0x10, 0xfc, 0x1f, 0xf8, 0x03, 0xf5, 0xe8, 0x09, 0xd3, 0x08, 0xe4,
0xdb, 0xf5, 0x22, 0x06, 0xf3, 0x3a, 0x1e, 0xd9, 0xdf, 0x01, 0x00,
0xf8, 0xd7, 0xea, 0x09, 0x15, 0xff, 0xdc, 0xf9, 0xd4, 0xf4, 0x0b, 
0xe4, 0x32, 0x37, 0xed, 0xdd, 0xff, 0xfb, 0x2a, 0xd7, 0xdb, 0xf4,
0xff, 0x1c, 0x13, 0xd3, 0xf4, 0xfa, 0xf5, 0x24, 0x0a, 0xeb, 0xe4,
0xda, 0xe4, 0xd4, 0xf8, 0xe6, 0x11, 0x0d, 0x1c, 0xfa, 0xa8, 0xfc,
0xe8, 0xba, 0x7f, 0xe7, 0xdb, 0x09, 0xf6, 0x28, 0x16, 0xdd, 0xf7,
0x25, 0x18, 0xe0, 0x17, 0xeb, 0x00, 0xe0, 0xe2, 0xb8, 0xe9, 0xda,
0xf7, 0x25, 0xe8, 0xf5, 0x22, 0x17, 0xdb, 0xe9, 0x06, 0x0a, 0x43,
0x02, 0x1e, 0xf8, 0xdb, 0x00, 0xdd, 0xd3, 0x50, 0x1a, 0xd8, 0xb5,
0xc5, 0x17, 0x1c, 0x2f, 0x05, 0x04, 0xf3, 0x07, 0x16, 0x13, 0x11,
0xef, 0xf8, 0x01, 0x00, 0x0e, 0x2a, 0x74, 0x2b, 0x06, 0xed, 0xd4,
0xdb, 0xb5, 0x0e, 0xe8, 0x1f, 0x0b, 0x35, 0x0a, 0x0d, 0x1e, 0x2a,
0x23, 0xf5, 0xe4, 0x1e, 0xd9, 0x57, 0xf4, 0xdb, 0x03, 0xb7, 0xf3,
0xe8, 0xdc, 0xaa, 0xdc, 0xf8, 0xd8, 0x21, 0xf6, 0x0b, 0x23, 0x06,
0x0e, 0xff, };
};

namespace ssie
{
    uint8_t run(const uint8_t *inputBuf);

    namespace
    {
        void inputOp(const uint8_t *inputBuf);
        void denseOp();
        void outputOp();

        int32_t activation(Activation act, int32_t neuronResult);
        void softmaxOp(int8_t zeroPoint);
    }

    namespace
    {
        uint8_t actCursor = 0;
        uint8_t neuronCursor = 0;
        uint16_t modelCursor = 0;

        bool currInputBuffer = 0;
        bool currOutputBuffer = 1;

        uint16_t activationLength = 0;

        int8_t buffer[2][ssie_model::intermediateBufferSize];

        uint8_t result;
    };

    uint8_t run(const uint8_t *inputBuf)
    {
        actCursor = 0;
        neuronCursor = 0;
        modelCursor = 0;

        currInputBuffer = 0;
        currOutputBuffer = 1;

        for(uint8_t i = 0; i < ssie_model::numOps; i++)
        {
            Operation currOp = ssie_model::ops[i];

            switch (currOp)
            {
            case Operation::INPUT:
                inputOp(inputBuf);
                break;
            case Operation::DENSE:
                denseOp();
                break;
            case Operation::OUTPUT:
                outputOp();
                break;
            }
        }

        return result;
    }

    namespace
    {
        void inputOp(const uint8_t *inputBuf)
        {
            for (uint8_t i = 0; i < ssie_model::numInputs; i++)
            {
                buffer[currOutputBuffer][i] = inputBuf[i];
                buffer[currOutputBuffer][i] -= 128;
            }

            currInputBuffer = !currInputBuffer;
            currOutputBuffer = !currOutputBuffer;
            activationLength = ssie_model::numInputs;
        }

        void denseOp()
        {
            static int cntr = 0;
            static float scales[3] = {0.022373778745532036, 0.020881101489067078, 0.047187235206365585};

            Activation act = ssie_model::acts[actCursor++];
            uint8_t numNeurons = ssie_model::numNeurons[neuronCursor++];

            int8_t zeroPoint = ssie_model::buffer[modelCursor++];

            for (uint8_t neuron = 0; neuron < numNeurons; neuron++)
            {
                // MatMul
                int32_t neuronResult = 0;
                for (uint8_t activation = 0; activation < activationLength; activation++)
                {
                    neuronResult += static_cast<int8_t>(ssie_model::buffer[modelCursor++]) * buffer[currInputBuffer][activation];
                }

                // BiasAdd
                int32_t bias = 0;
                bias |= (ssie_model::buffer[modelCursor++] << 24);
                bias |= (ssie_model::buffer[modelCursor++] << 16);
                bias |= (ssie_model::buffer[modelCursor++] << 8);
                bias |= ssie_model::buffer[modelCursor++];
                neuronResult += bias;

                // Activation and zero point
                if (act != Activation::SOFTMAX)
                {
                    buffer[currOutputBuffer][neuron] = activation(act, neuronResult * scales[cntr++]) + zeroPoint;
                    std::cout << (int)buffer[currOutputBuffer][neuron] << std::endl;
                }
                else
                {
                    buffer[currOutputBuffer][neuron] = neuronResult;
                }
            }

            if (act == Activation::SOFTMAX)
            {
                softmaxOp(zeroPoint);
            }

            currInputBuffer = !currInputBuffer;
            currOutputBuffer = !currOutputBuffer;
            activationLength = numNeurons;
        }

        void outputOp()
        {
            std::cout << "OUT:" << std::endl;
            float maxVal = -1 * std::numeric_limits<float>::infinity();
            result = 255;
            for (uint8_t i = 0; i < ssie_model::numClasses; i++)
            {
                std::cout << (int)buffer[currInputBuffer][i] << std::endl;
                if (buffer[currInputBuffer][i] > maxVal)
                {
                    maxVal = buffer[currInputBuffer][i];
                    result = i;
                }
            }
        }

        int32_t activation(Activation act, int32_t neuronResult)
        {
            if (act == Activation::RELU)
            {
                return (neuronResult > 0 ? neuronResult : 0);
            }
            return 0;
        }

        void softmaxOp(int8_t zeroPoint)
        {
            return;
            float maxVal = -1 * std::numeric_limits<float>::infinity();
            for (uint8_t i = 0; i < ssie_model::numClasses; i++)
            {
                if (buffer[currOutputBuffer][i] > maxVal)
                {
                    maxVal = buffer[currOutputBuffer][i];
                }
            }

            float sum = 0;
            for (uint8_t i = 0; i < ssie_model::numClasses; i++)
            {
                buffer[currOutputBuffer][i] = std::exp(buffer[currOutputBuffer][i] - maxVal);
                sum += buffer[currOutputBuffer][i];
            }

            for (uint8_t i = 0; i < ssie_model::numClasses; i++)
            {
                buffer[currOutputBuffer][i] = buffer[currOutputBuffer][i] / sum + zeroPoint;
            }
        }
    };
};

int main()
{
    uint8_t buf[] = {0, 0, 48, 0, 0, 2, 0, 0, 0, 0, 4, 0, 0, 0, 4, 32, 0, 0, 0, 1, 0, 1, 0, 64, 0, 0, 0, 0, 64, 0, 0, 17, 0, 0, 0, 32, 64, 0, 0, 16, 8, 0, 0, 0, 32, 2, 0, 0, 0, 0};
    int r = ssie::run(buf);

    std::cout << r << std::endl;
    return 0;
}